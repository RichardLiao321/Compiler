/* lexer.js  */
	//Lookup map for characters received
	var map= new Object();
	map['a']=0;
	map['b']=1;
	map['c']=2;
	map['d']=3;
	map['e']=4;
	map['f']=5;
	map['g']=6;
	map['h']=7;
	map['i']=8;
	map['j']=9;
	map['k']=10;
	map['l']=11;
	map['m']=12;
	map['n']=13;
	map['o']=14;
	map['p']=15;
	map['q']=16;
	map['r']=17;
	map['s']=18;
	map['t']=19;
	map['u']=20;
	map['v']=21;
	map['w']=22;
	map['x']=23;
	map['y']=24;
	map['z']=25;
	map['0']=26;
	map['1']=27;
	map['2']=28;
	map['3']=29;
	map['4']=30;
	map['5']=31;
	map['6']=32;
	map['7']=33;
	map['8']=34;
	map['9']=35;
	map['=']=36;
	map['!']=37;
	map['(']=38;
	map[')']=39;
	map['{']=40;
	map['}']=41;
	map['$']=42;
	map['"']=43;
	map['+']=44;
	map[' ']=45;
	map['\n']=46;
	
	function get(k){
		return map[k];
	};
/*HUGE MATRIX INCOMING. FINDING NE(M)O.
@==accepting state
@TODO: 
       deny continous word ex:yay!
DONE   assignment vs equality
DONE   deny multiple digits
       token line #
       what happens after token is found/found?
	   Check for even num of quotes 
	   HANDLE WHATEVER IS IN BETWEEN QUOTES OHGODHOW
	   Error handling.
	   newLineChar
*/
	var delta =[
		//		| 0 | 1	| 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10| 11| 12| 13| 14| 15| 16| 17| 18| 19| 20| 21| 22| 23| 24| 25| 26| 27| 28| 29| 30| 31| 32| 33| 34| 35| 36| 37| 38| 39| 40| 41| 42| 43| 44| 45| 46|
		//      | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | = | ! | ( | ) | { | } | $ | " | + | sp| \n|
		/*q0*/	[15 ,21 ,15 ,15 ,15 ,30 ,15 ,15 ,11 ,15 ,15 ,15 ,15 ,15 ,15 ,1  ,15 ,15 ,16 ,27 ,15 ,15 ,6	,15 ,15 ,15 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,42 ,37 ,35 ,46 ,47 ,45 ,45 ,48 ,39 , 43, 0 ,],
/*Print   q1*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,2  ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 15,],
		/*q2*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,3  ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
		/*q3*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,4  ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
		/*q4*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,5  ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
/*@Print  q5*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 5 ,],
/*While   q6*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,7  ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 15,],
		/*q7*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,8  ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
		/*q8*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,9  ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
		/*q9*/	[49 ,49 ,49 ,49 ,10 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
/*@While q10*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 10,],
/*if     q11*/	[49 ,49 ,49 ,49 ,49 ,12 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,13 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 15,],
/*@if    q12*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 12,],
/*Int    q13*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,14 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
/*@type  q14*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 14,],
/*@id    q15*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 15,],
/*String q16*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,17 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 15,],
		/*q17*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,18 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
		/*q18*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,19 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
		/*q19*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,20 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
		/*q20*/	[49 ,49 ,49 ,49 ,49 ,49 ,14 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
/*Boolean q21*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,22 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 15,],
		/*q22*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,23 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
		/*q23*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,24 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
		/*q24*/	[49 ,49 ,49 ,49 ,25 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
		/*q25*/	[26 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
		/*q26*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,14 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
/*True    q27*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,28 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 15,],
		/*q28*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,29 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
/*        q29*/	[49 ,49 ,49 ,49 ,34 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 31,],
/*False   q30*/	[31 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 15,],
		/*q31*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,32 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
		/*q32*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,33 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
		/*q33*/	[49 ,49 ,49 ,49 ,34 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
/*@bool   q34*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 34,],
/* !=     q35*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,36 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
/*@!=     q36*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 36,],
/*==  @=  q37*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,38 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],
/*@==     q38*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 38,],
/*ChrList q39*/	[40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,40 ,41 , 49, 40,],
		/*q40*/	[39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,39 ,41 , 49, 39,],
/*@ChrListq41*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 41,],
/*@digit  q42*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 42,],
/* @+     q43*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 43,],
/* @{     q45*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 45,],
/* @}     q45*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 45,],
/* @(     q46*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 46,],
/* @)     q47*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 47,],
/* @$     q48*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 48,],
/* ERROR  q49*/	[49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 ,49 , 49, 49,],	
	];
	var state;//global DFA position variable
	/*Token Class
		var x = new token('Int',1);
	*/
	function token(type,val){
		this.type=type;
		this.val=val;
		this.printMe = function(){
			return "Type: "+this.type+'Val: '+this.val;
		};
	}
	//makes code clearer. resets state back to 0. 
	function resetState(){
		state=0;
	}
    function lex(){
        //Grab the "raw" source code.
        var sourceCode = document.getElementById("taSourceCode").value;
        //Trim the leading and trailing spaces.
        sourceCode = trim(sourceCode);
        //remove line breaks too.
		//sourceCode = sourceCode.replace(/(\r\n|\n|\r)/gm,"");
		console.log('CHARSSSSS: '+sourceCode);
		//remove all spaces in the middle;
		//sourceCode = sourceCode.replace(/\s/g,'');
		process(sourceCode);
        return sourceCode;
    }
	function process(str){
		//DFA State starts at 0
		state=0;
		var c;
		//loop through input string
		for(i=0;i<str.length;i++){
			//c is the character at i, mapped to the map
			c=get(str.charAt(i));
			//console.log("got char "+str.charAt(i)+": "+c);
			try {
				//find next state in matrix.
				state=delta[state][c];
				//console.log("moving to state: "+state);
				//pass string and current position to checkState to check next char in input
				checkState(str,i);
			}catch(err) {
				//on err, go to state 49, error state
				state=49;
			}
		}
	}
	//Checks the current state for an accept state.
	//If so, creates the appropriate token and resets the state
	function checkState(string,pos){
		var input=string;
		var i=pos;
		console.log("checking state: "+state);
		switch(state) {
			case 5:
				resetState();
				console.log('Token found: Print');
				//create Print Token
				break;
			case 10:
				resetState();
				console.log('Token found: While');
				//create While Token
				break;
			case 12:
				resetState();
				console.log('Token found: If');
				//create if Token
				break;
			case 14:
				resetState();
				console.log('Token found: Type');
				//create Type Token
				break;
 			case 15:
				//FIXME
				resetState();
				console.log('Token found: Identifier');
				//create id Token
				break; 
			case 34:
				resetState();
				console.log('Token found: Boolean Value');
				//create BoolVal Token
				break;
			case 36:
				resetState();
				console.log('Token found: Inequality');
				//create inequality Token
				break;
			case 37:
				//Need to check for this case because == has same initial input as =
				if(input.charAt(i+1)=='='){
					return;
				}else{
					resetState();
					console.log('Token found: Assignment');
					//create Assignment Token
				}
				break;
			case 38:
				resetState();
				console.log('Token found: Equality');
				//create equality Token
				break;
			case 41:
			//FIXME
				resetState();
				console.log('Token found: String');
				//create String Token
				break;
			case 42:
			//check for more than 1 digit. If so, self destruct computer
				if(!isNaN(parseInt(input.charAt(i+1)))){
					console.log("ANOTHER DIGIT! BURN THE WITCH!");
					return;
				}else{
					resetState();
					console.log('Token found: Digit');
					//create digit Token
				}
				break;
			case 43:
				resetState();
				console.log('Token found: Integer Operator');
				//create Integer Operator Token
				break;
			case 44:
				resetState();
				console.log('Token found: Left Bracket');
				//create Left Bracket Token
				break;
			case 45:
				resetState();
				console.log('Token found: Right Bracket');
				//create Right Bracket Token
				break;
			case 46:
				resetState();
				console.log('Token found: Left Parenthesis');
				//create Left Parenthesis Token
				break;
			case 47:
				resetState();
				console.log('Token found: Right Parenthesis');
				//create right Parenthesis Token
				break;
			case 48:
				resetState();
				console.log('Token found: EOF');
				//create EOF Token
				break;
			case 49:
				resetState();
				console.log('Token found: Error');
				//create Error Token
				break;
			default:
		}
	}